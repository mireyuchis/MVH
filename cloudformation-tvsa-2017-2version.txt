AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  TrustedNetworkCidr:
    Type: String
    Default: 200.57.75.33/32
  VpcCidr:
    Type: String
    Default: 10.203.0.0/16
  SshKeyName:
    Type: AWS::EC2::KeyPair::KeyName
  ImageId:
    Type: String
    Default: ami-cd0f5cb6
  InstanceType:
    Type: String
    Default: t2.medium
  SSLCertArn:
    Type: String
    Default: "arn:aws:acm:us-east-1:528662748254:certificate/247d7cc6-b65f-4223-b144-ce86adec8257"
  HostedZoneId:
    Type: String
    Default: Z1T02HEH5XEFSN

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr  
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: VpcTVSA-infraestructure
          
  PublicASubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Join [".",[!Select [0, !Split [".", !Ref VpcCidr]], !Select [1, !Split [".", !Ref VpcCidr]], "10.0/24" ] ]
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value: VpcTVSA-infraestructure-public-a

  PublicBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Join [".",[!Select [0, !Split [".", !Ref VpcCidr]], !Select [1, !Split [".", !Ref VpcCidr]], "11.0/24" ] ]
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value: VpcTVSA-infraestructure-public-b
          
  DatabaseASubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Join [".",[!Select [0, !Split [".", !Ref VpcCidr]], !Select [1, !Split [".", !Ref VpcCidr]], "200.0/24" ] ]
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value: VpcTVSA-infraestructure-database-a

  DatabaseBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Join [".",[!Select [0, !Split [".", !Ref VpcCidr]], !Select [1, !Split [".", !Ref VpcCidr]], "201.0/24" ] ]
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value: VpcTVSA-infraestructure-database-b

  VpcIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: VpcTVSA-infraestructure-Igw

  NatGwElasticIp01:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
    DependsOn: IgwVpcAssociation

  NatGwElasticIp02:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
    DependsOn: IgwVpcAssociation

  NatGwPublicA:
    Type: AWS::EC2::NatGateway
    Properties:
       AllocationId:
        Fn::GetAtt:
          - NatGwElasticIp01
          - AllocationId
       SubnetId:
         Ref: PublicASubnet

  NatGwPublicB:
    Type: AWS::EC2::NatGateway
    Properties:
       AllocationId:
        Fn::GetAtt:
          - NatGwElasticIp02
          - AllocationId
       SubnetId:
         Ref: PublicBSubnet

  DhcpOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: "ec2.internal"
      DomainNameServers:
      - AmazonProvidedDNS

  DefaultAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value: VpcTVSA-infraestructure-default

  PublicAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value: VpcTVSA-infraestructure-public

  DatabaseAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value: VpcTVSA-infraestructure-db


  PublicAAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: PublicAcl
      SubnetId:
        Ref: PublicASubnet

        
  PublicBAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: PublicAcl
      SubnetId:
        Ref: PublicBSubnet


  DatabaseAAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: DatabaseAcl
      SubnetId:
        Ref: DatabaseASubnet

  DatabaseBAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: DatabaseAcl
      SubnetId:
        Ref: DatabaseBSubnet


  PublicAclRuleEgress001:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: PublicAcl
      Protocol: -1
      RuleAction : allow
      RuleNumber : 1

  PublicAclRuleIngress001:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: PublicAcl
      Protocol: -1
      RuleAction : allow
      RuleNumber : 1

  DatabaseAclRuleEgress001:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId:
        Ref: DatabaseAcl
      Protocol: -1
      RuleAction : allow
      RuleNumber : 1

  DatabaseAclRuleIngress001:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId:
        Ref: DatabaseAcl
      Protocol: -1
      RuleAction : allow
      RuleNumber : 1

  DefaultAclRuleEgress001:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId:
        Ref: DefaultAcl

  DefaultAclRuleIngress001:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId:
        Ref: DefaultAcl
          
  PublicARoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value: VpcTVSA-infraestructure-public

  PublicBRoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value: VpcTVSA-infraestructure-public


  DefaultRoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value: VpcTVSA-infraestructure-default

  DatabaseRoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value: VpcTVSA-infraestructure-db

  IgwVpcAssociation:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc
      InternetGatewayId:
        Ref: VpcIgw


  PublicARoutingSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicARoutingTable
      SubnetId:
        Ref: PublicASubnet

  PublicBRoutingSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicBRoutingTable
      SubnetId:
        Ref: PublicBSubnet

  DatabaseARoutingSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: DatabaseRoutingTable
      SubnetId:
        Ref: DatabaseASubnet

  DatabaseBRoutingSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: DatabaseRoutingTable
      SubnetId:
        Ref: DatabaseBSubnet

  PublicARoutingTableRoute001:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: PublicARoutingTable
      GatewayId:
        Ref: VpcIgw
    DependsOn: IgwVpcAssociation

  PublicBRoutingTableRoute001:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: PublicBRoutingTable
      GatewayId:
        Ref: VpcIgw
    DependsOn: IgwVpcAssociation

  DefaultRoutingTableRoute001:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: DefaultRoutingTable
      GatewayId:
        Ref: VpcIgw
    DependsOn: IgwVpcAssociation

  DhcpOptionsVpcAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId:
        Ref: Vpc
      DhcpOptionsId:
        Ref: DhcpOptions

  FeELBSecuritygroup:
    Properties:
      GroupDescription:
        Ref: AWS::StackName
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: tcp
        ToPort: 8080
      VpcId:
        Ref: Vpc
    Type: AWS::EC2::SecurityGroup

  VmhELBSecuritygroup:
    Properties:
      GroupDescription:
        Ref: AWS::StackName
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: tcp
        ToPort: 8080
      VpcId:
        Ref: Vpc
    Type: AWS::EC2::SecurityGroup

  FeAppServerSecurityGroup:
    Properties:
      GroupDescription:
        Ref: AWS::StackName
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 8080
      VpcId:
        Ref: Vpc
    Type: AWS::EC2::SecurityGroup

  PGSQLSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: PGSQL cluster instance security group
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value: PVpcTVSA-infraestructure-PGSQL

  PGSQLSecurityGroupIngress001:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: PGSQLSecurityGroup
      IpProtocol: '-1'
      CidrIp: !Ref VpcCidr 

  PGSQLSecurityGroupEgress002:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Ref: PGSQLSecurityGroup
      IpProtocol: '-1'
      CidrIp: !Ref VpcCidr 

  FeAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web Fe App Security group for application servers
      VpcId:
        Ref: Vpc
  FeAppSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'FeAppSecurityGroup'
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 0.0.0.0/0
  FeAppSecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'FeAppSecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0
  FeAppELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS App Security Group, allows Target Groups to connect to Container
      VpcId:
        Ref: Vpc
  FeAppSecurityGroupHTTPSinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'FeAppELBSecurityGroup'
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0
  FeAppSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'FeAppELBSecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0

  FeElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - Ref: PublicASubnet
        - Ref: PublicBSubnet
      SecurityGroups:
        - Ref: FeAppELBSecurityGroup 
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '8080'
        Protocol: HTTP
      - LoadBalancerPort: '443'
        InstancePort: '8080'
        Protocol: HTTPS
        SSLCertificateId: !Ref SSLCertArn
      HealthCheck:
        Target: HTTP:8080/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'

  FeElbDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: dev-fe-elb.televisa-devops.com 
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - !GetAtt FeElasticLoadBalancer.DNSName

  FeEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref SshKeyName
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: FeAppSecurityGroup
          SubnetId:
            Ref: PublicBSubnet
      
  FeDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: dev-fe.televisa-devops.com
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - !GetAtt FeEc2Instance.PublicDnsName
Outputs:
  NetworkVpcId:
    Description: The ID of the VPC
    Value: !Ref Vpc
    Export:
      Name: !Sub "${AWS::StackName}-NetworkVpcId"

  PublicASubnet:
    Description: The ID of the PublicASubnet
    Value: !Ref PublicASubnet
    Export:
      Name: !Sub "${AWS::StackName}-PublicASubnet"

  PublicBSubnet:
    Description: The ID of the PublicBSubnet
    Value: !Ref PublicBSubnet
    Export:
      Name: !Sub "${AWS::StackName}-PublicBSubnet"

  DatabaseASubnet:
    Description: The ID of the DatabaseASubnet
    Value: !Ref DatabaseASubnet
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseASubnet"

  DatabaseBSubnet:
    Description: The ID of the DatabaseBSubnet
    Value: !Ref DatabaseBSubnet
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseBSubnet"

  PGSQLSecurityGroup:
    Description: The ID of the PGSQLSecurityGroup
    Value: !Ref PGSQLSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-PGSQLSecurityGroup"

  SshKeyName:
    Description: The name of the SSH key used in the infra
    Value: !Ref SshKeyName
    Export:
      Name: !Sub "${AWS::StackName}-SshKeyName"